import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
import {
  BlackFrame,
  ConnectedHomeSettingsForUpdate,
  DatasetChanges,
  DetectionFilter,
  FaceAttributes,
  KinesisVideoStreamStartSelector,
  LabelDetectionFeatureName,
  LabelDetectionSettings,
  NotificationChannel,
  ProjectVersionStatus,
  RegionOfInterest,
  SegmentType,
  StreamProcessorDataSharingPreference,
  Video,
} from "./models_0";
import { RekognitionServiceException as __BaseException } from "./RekognitionServiceException";
export interface StartCelebrityRecognitionResponse {
  JobId?: string;
}
export declare class VideoTooLargeException extends __BaseException {
  readonly name: "VideoTooLargeException";
  readonly $fault: "client";
  Message?: string;
  Code?: string;
  Logref?: string;
  constructor(
    opts: __ExceptionOptionType<VideoTooLargeException, __BaseException>
  );
}
export interface StartContentModerationRequest {
  Video: Video | undefined;
  MinConfidence?: number;
  ClientRequestToken?: string;
  NotificationChannel?: NotificationChannel;
  JobTag?: string;
}
export interface StartContentModerationResponse {
  JobId?: string;
}
export interface StartFaceDetectionRequest {
  Video: Video | undefined;
  ClientRequestToken?: string;
  NotificationChannel?: NotificationChannel;
  FaceAttributes?: FaceAttributes | string;
  JobTag?: string;
}
export interface StartFaceDetectionResponse {
  JobId?: string;
}
export interface StartFaceSearchRequest {
  Video: Video | undefined;
  ClientRequestToken?: string;
  FaceMatchThreshold?: number;
  CollectionId: string | undefined;
  NotificationChannel?: NotificationChannel;
  JobTag?: string;
}
export interface StartFaceSearchResponse {
  JobId?: string;
}
export interface StartLabelDetectionRequest {
  Video: Video | undefined;
  ClientRequestToken?: string;
  MinConfidence?: number;
  NotificationChannel?: NotificationChannel;
  JobTag?: string;
  Features?: (LabelDetectionFeatureName | string)[];
  Settings?: LabelDetectionSettings;
}
export interface StartLabelDetectionResponse {
  JobId?: string;
}
export interface StartPersonTrackingRequest {
  Video: Video | undefined;
  ClientRequestToken?: string;
  NotificationChannel?: NotificationChannel;
  JobTag?: string;
}
export interface StartPersonTrackingResponse {
  JobId?: string;
}
export interface StartProjectVersionRequest {
  ProjectVersionArn: string | undefined;
  MinInferenceUnits: number | undefined;
  MaxInferenceUnits?: number;
}
export interface StartProjectVersionResponse {
  Status?: ProjectVersionStatus | string;
}
export interface StartShotDetectionFilter {
  MinSegmentConfidence?: number;
}
export interface StartTechnicalCueDetectionFilter {
  MinSegmentConfidence?: number;
  BlackFrame?: BlackFrame;
}
export interface StartSegmentDetectionFilters {
  TechnicalCueFilter?: StartTechnicalCueDetectionFilter;
  ShotFilter?: StartShotDetectionFilter;
}
export interface StartSegmentDetectionRequest {
  Video: Video | undefined;
  ClientRequestToken?: string;
  NotificationChannel?: NotificationChannel;
  JobTag?: string;
  Filters?: StartSegmentDetectionFilters;
  SegmentTypes: (SegmentType | string)[] | undefined;
}
export interface StartSegmentDetectionResponse {
  JobId?: string;
}
export interface StreamProcessingStartSelector {
  KVSStreamStartSelector?: KinesisVideoStreamStartSelector;
}
export interface StreamProcessingStopSelector {
  MaxDurationInSeconds?: number;
}
export interface StartStreamProcessorRequest {
  Name: string | undefined;
  StartSelector?: StreamProcessingStartSelector;
  StopSelector?: StreamProcessingStopSelector;
}
export interface StartStreamProcessorResponse {
  SessionId?: string;
}
export interface StartTextDetectionFilters {
  WordFilter?: DetectionFilter;
  RegionsOfInterest?: RegionOfInterest[];
}
export interface StartTextDetectionRequest {
  Video: Video | undefined;
  ClientRequestToken?: string;
  NotificationChannel?: NotificationChannel;
  JobTag?: string;
  Filters?: StartTextDetectionFilters;
}
export interface StartTextDetectionResponse {
  JobId?: string;
}
export interface StopProjectVersionRequest {
  ProjectVersionArn: string | undefined;
}
export interface StopProjectVersionResponse {
  Status?: ProjectVersionStatus | string;
}
export interface StopStreamProcessorRequest {
  Name: string | undefined;
}
export interface StopStreamProcessorResponse {}
export interface TagResourceRequest {
  ResourceArn: string | undefined;
  Tags: Record<string, string> | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  ResourceArn: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateDatasetEntriesRequest {
  DatasetArn: string | undefined;
  Changes: DatasetChanges | undefined;
}
export interface UpdateDatasetEntriesResponse {}
export declare const StreamProcessorParameterToDelete: {
  readonly ConnectedHomeMinConfidence: "ConnectedHomeMinConfidence";
  readonly RegionsOfInterest: "RegionsOfInterest";
};
export type StreamProcessorParameterToDelete =
  (typeof StreamProcessorParameterToDelete)[keyof typeof StreamProcessorParameterToDelete];
export interface StreamProcessorSettingsForUpdate {
  ConnectedHomeForUpdate?: ConnectedHomeSettingsForUpdate;
}
export interface UpdateStreamProcessorRequest {
  Name: string | undefined;
  SettingsForUpdate?: StreamProcessorSettingsForUpdate;
  RegionsOfInterestForUpdate?: RegionOfInterest[];
  DataSharingPreferenceForUpdate?: StreamProcessorDataSharingPreference;
  ParametersToDelete?: (StreamProcessorParameterToDelete | string)[];
}
export interface UpdateStreamProcessorResponse {}
